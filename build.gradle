import java.text.SimpleDateFormat

buildscript {
    ext {
        junit_platform_version = '1.0.3'
    }

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.0'
        classpath "org.junit.platform:junit-platform-gradle-plugin:$junit_platform_version"
    }
}

plugins {
    id 'com.gradle.build-scan' version '1.12.1'
}

ext {
    artifactVersion = new SimpleDateFormat('yyyy-MM-dd\'T\'HH-mm-ss').format(new Date())
    bintrayDryRun = false
}

apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'org.junit.platform.gradle.plugin'

def dependencyVersions = [
        "com.squareup.okio:okio:1.14.0",
]

configurations.all {
    resolutionStrategy {
        failOnVersionConflict()
        force dependencyVersions
    }
}

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.25'
    testRuntime 'org.slf4j:jul-to-slf4j:1.7.25'
    testRuntime 'ch.qos.logback:logback-classic:1.2.3'

    compile 'com.squareup.okio:okio:1.14.0'
    compile 'com.squareup.okhttp3:okhttp:3.9.1'
    testCompile 'com.squareup.okhttp3:mockwebserver:3.9.1'

    compile('com.kohlschutter.junixsocket:junixsocket-native-common:2.0.4') {
        exclude module: 'log4j'
    }
    compile('com.kohlschutter.junixsocket:junixsocket-common:2.0.4') {
        exclude module: 'log4j'
    }

    testRuntime "org.junit.platform:junit-platform-launcher:$junit_platform_version"
    testCompile "org.junit.jupiter:junit-jupiter-api:5.0.3"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:5.0.3"
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

//junitPlatform {
//    enableStandardTestTask true
//}

task sourcesJar(type: Jar) {
    dependsOn classes
    classifier 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        dockerFilesocket(MavenPublication) {
            groupId 'de.gesellix'
            artifactId 'docker-filesocket'
            version artifactVersion
            from components.java
            artifact sourcesJar
        }
    }
}

bintray {
    user = System.env.BINTRAY_USER ?: project["bintray.user"]
    key = System.env.BINTRAY_API_KEY ?: project["bintray.key"]
    publications = ['dockerFilesocket']
    pkg {
        repo = 'docker-utils'
        name = 'docker-filesocket'
        desc = 'Unix Domain Sockets and Named Pipes for the JVM on Linux, macOS, and Windows'
        licenses = ['Apache-2.0']
        labels = ['docker', 'unix socket', 'linux', 'mac', 'named pipe', 'windows', 'engine api', 'remote api', 'client', 'java']
        version = [
                name: artifactVersion
        ]
        vcsUrl = 'https://github.com/docker-client/docker-filesocket.git'
    }
    dryRun = bintrayDryRun
}
bintrayUpload.dependsOn build

task wrapper(type: Wrapper) {
    gradleVersion = '4.5.1'
    distributionType = Wrapper.DistributionType.ALL
}
